import { useContext } from 'react';
import { AuthContext } from 'src/contexts/auth-context';

export const useAuth = () => useContext(AuthContext);

//컴포넌트를 만들다보면, 반복되는 로직이 자주 발생합니다. 예를 들어서 input 을 관리하는 코드는 관리 할 때마다 꽤나 비슷한 코드가 반복되죠.
//그러한 상황에 커스텀 Hooks 를 만들어서 반복되는 로직을 쉽게 재사용
//선택적 사용 기존의 코드를 다시 작성할 필요 없이 일부의 컴포넌트들 안에서 Hook을 사용할 수 있습니다
//Hook은 계층의 변화 없이 상태 관련 로직을 재사용할 수 있도록 도와줍니다
//Hook을 통해 서로 비슷한 것을 하는 작은 함수의 묶음으로 컴포넌트를 나누는 방법을 사용할 수 있습니다. (구독 설정 및 데이터를 불러오는 것과 같은 로직)
//Hook은 Class없이 React 기능들을 사용하는 방법을 제시합니다

//Hook을 사용하지 않던 기존 문제점.
//문제점 1 : 컴포넌트 사이에서 상태 로직을 재사용하기 어렵습니다
//문제점 2 : 복잡한 컴포넌트들은 이해하기 어렵습니다
//문제점 3 : Class은 사람과 기계를 혼동시킵니다
//Class는 최근 사용되는 도구에서도 많은 문제를 일으킵니다. 예를 들어 Class는 코드의 최소화를 힘들게 만들고, 핫 리로딩을 깨지기 쉽고 신뢰할 수 없게 만듭니다